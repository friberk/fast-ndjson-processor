name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_DEFAULT_VERSION: "3.11"

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy
        pip install -e .[dev]

    - name: Run Black (formatting check)
      run: black --check --diff .

    - name: Run isort (import sorting check)
      run: isort --check-only --diff .

    - name: Run flake8 (linting)
      run: flake8 fast_ndjson_processor tests

    - name: Run mypy (type checking)
      run: mypy fast_ndjson_processor

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size for non-critical combinations
          - os: windows-latest
            python-version: "3.8"
          - os: macOS-latest
            python-version: "3.8"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,progress]

    - name: Run tests with coverage
      run: |
        pytest --cov=fast_ndjson_processor --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  performance-test:
    name: Performance Benchmark
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,progress]
        pip install pytest-benchmark

    - name: Run performance benchmarks
      run: |
        pytest tests/test_performance.py --benchmark-only --benchmark-json=benchmark.json

    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: benchmark.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -e .

    - name: Run safety check
      run: safety check

    - name: Run bandit security check
      run: bandit -r fast_ndjson_processor/

  documentation:
    name: Documentation Build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints

    - name: Build documentation
      run: |
        cd docs
        make html

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/_build/html/

  build-and-test-package:
    name: Build and Test Package
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Test install from wheel
      run: |
        pip install dist/*.whl
        python -c "import fast_ndjson_processor; print('Import successful')"

    - name: Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: packages
        path: dist/

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,progress]

    - name: Generate test data
      run: |
        python -c "
        import json
        import random
        with open('large_test.ndjson', 'w') as f:
            for i in range(100000):
                record = {'id': i, 'value': random.randint(1, 1000), 'category': f'cat_{i % 10}'}
                f.write(json.dumps(record) + '\n')
        "

    - name: Test CLI commands
      run: |
        python -m fast_ndjson_processor.cli info large_test.ndjson
        python -m fast_ndjson_processor.cli validate large_test.ndjson
        python -m fast_ndjson_processor.cli process large_test.ndjson --handler count
        python -m fast_ndjson_processor.cli split large_test.ndjson --chunk-size 10000 --output-dir chunks/

    - name: Test large file processing
      run: |
        python -c "
        from fast_ndjson_processor import FastNDJSONProcessor
        processor = FastNDJSONProcessor(n_workers=2, show_progress=True)
        results = processor.process_file('large_test.ndjson', lambda x: 1)
        print(f'Processed {sum(results) if results else 0} records')
        "

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, security-scan, build-and-test-package, integration-test]
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*

    - name: Create GitHub release assets
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, security-scan, build-and-test-package, integration-test]
    if: failure()

    steps:
    - name: Notify team
      run: |
        echo "CI/CD pipeline failed. Please check the logs."
        # Add notification logic here (Slack, email, etc.)
